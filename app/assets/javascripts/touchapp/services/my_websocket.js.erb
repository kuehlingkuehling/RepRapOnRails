touchApp.factory('MyWebsocket', function($q, $location, $timeout, $rootScope, $modal) {
  var Service = {};  
  Service.log = [];
  Service.print = {
    state:0,
    job:'',
    elapsed_in_words:'',
    job_id:0,
    psu_on:false,
    progress:0,
    time_remaining:''
  };
  Service.printjobs = [];
  Service.filamentPresets = [];
  Service.filamentsLoaded = {};
  Service.preheatingProfiles = [];
  Service.preheatingProfile = 0;
  Service.menuDisabled = false;
  Service.isDualExtruder = false;
  Service.eeprom = {};
  var deferred = $q.defer();  
  var dispatcher = new WebSocketRails(WEBSOCKET_URL);


  dispatcher.on_open = function(data) {
    console.log('WebSocket Connection has been established: ' + data);
    Service.get('status').then(function(data){
      console.log(data)
      $timeout(function(){      
        Service.print.state = data.state;
        Service.print.job = data.job;      
        Service.print.job_id = data.job_id;
        Service.print.psu_on = data.psu_on;
      });
    });     
    Service.get('logfile').then(function(data){
      $timeout(function(){
        Service.log = data;
      });
    });  
    Service.get('is_dual_extruder').then(function(data){
      $timeout(function(){
        console.log("Fetched Dual Extruder state");
        Service.isDualExtruder = data;
      });
    }); 
    Service.get('printjob.all').then(function(data){
      $timeout(function(){      
        Service.printjobs = data;
      });
    });
    Service.get('filament.all').then(function(data){
      $timeout(function(){
        Service.filamentPresets = data;
      });
    });
    Service.get('filament.get_loaded').then(function(data){
      $timeout(function(){
        Service.filamentsLoaded = data;
      });
    });
    Service.get('preheating_profile.all').then(function(data){
      $timeout(function(){
        Service.preheatingProfiles = data;
      });
    });
    Service.get('preheating_profile.get_selected').then(function(data){
      $timeout(function(){
        Service.preheatingProfile = data;
      });
    }); 
    $rootScope.$apply(function(){    
      deferred.resolve(Service); 
    });    
  };    
  
  Service.online = deferred.promise;
  
  Service.get = function(event, arguments) {
    if (typeof arguments == "undefined") {
        arguments = '';
    }
    var d = $q.defer();    

    //console.log("Fetching Event \"" + event + "\" through WebSocket");
    
    var success = function(data) {
    //  console.log("Received Data for Event \"" + event + "\" through WebSocket!");
      d.resolve(data);
    };
    
    var failure = function(response) {
      console.log("Query failed: "+response);
      d.reject(response);
    };
    
    dispatcher.trigger(event, arguments, success, failure);
    //console.log("returning promise");
    return d.promise;
  };
  
  Service.sendgcode = function(gcode) {
    console.log("Sending GCODE \"" + gcode + "\" through WebSocket");
    dispatcher.trigger('sendgcode', gcode);
  }; 

  Service.macro = function(name) {
    console.log("Starting Macro \"" + name + "\" through WebSocket");
    dispatcher.trigger('macro', name);
  };  
  
  Service.move = function(coord) {
    console.log("Sending Move Coordinates \"" + coord + "\" through WebSocket");
    dispatcher.trigger('move', coord);
  };    
  
  Service.set_temp = function(params) {
    console.log("Setting Extruder Parameters to \"" + params + "\" through WebSocket");
    dispatcher.trigger('set_temp', params);
  }; 
  
  Service.extrude = function(params) {
    console.log("Sending Extrusion Parameters \"" + params + "\" through WebSocket");
    dispatcher.trigger('extrude', params);
  };   
  
  Service.emergencystop = function() {
    console.log("EMERGENCY STOP - resetting printer");
    dispatcher.trigger('emergencystop');
  }; 
  

  logchannel = dispatcher.subscribe('log');
  logchannel.bind('new', function(message){
    console.log('New Log Message: ' + message);
    $timeout(function(){
      Service.log.unshift(message);
      //make sure we only keep a maximum of 100 lines in log  
      Service.log = Service.log.slice(0,100); 
    });
  });

  Service.temp = {};
  tempchannel = dispatcher.subscribe('temp');
  tempchannel.bind('new', function(message){
    console.log('New Temp String received!');
    //console.log(message);    
    $timeout(function(){
      Service.temp = message;
    });
  });

  jobchannel = dispatcher.subscribe('printjobs');
  jobchannel.bind('reload', function(message){
    console.log('Queue updated, reloading!');
    $timeout(function(){
      Service.get('printjob.all').then(function(data){
        Service.printjobs = data;
      }); 
    });
  });    
  
  printchannel = dispatcher.subscribe('print');
  printchannel.bind('state', function(message){
    console.log('New Printer State received: ' + message);
    // 0: Offline
    // 1: Idle
    // 2: Printing
    // 3: Paused
    // 4: Emergency Stop
    // 5: Preheating
    $timeout(function(){
      Service.print.state = message;
    });
  });   
  printchannel.bind('progress', function(message){
    console.log('New Progress update received: ' + message);
    $timeout(function(){
      Service.print.progress = message.percent;
      Service.print.time_remaining = message.time_remaining;
    });
  });   
  printchannel.bind('job', function(message){
    console.log('New Printer Job Name String received: ' + message);
    $timeout(function(){
      Service.print.job = message.name;
      Service.print.job_id = message.job_id;
    });
  }); 
  printchannel.bind('psu', function(message){
    console.log('New PSU_on status received: ' + message);
    $timeout(function(){
      Service.print.psu_on = message;
    });
  }); 
  printchannel.bind('finished', function(message){
    console.log('New Printjob Finished Message received: ' + message.id);
    $timeout(function(){    
      Service.print.elapsed_in_words = message.elapsed;
    });
    $location.path( "/print_finished/" + message.id );
  });   
  printchannel.bind('pause_message', function(message){
    console.log('Pause Message received: ' + message);
    $location.path( "/paused/" + message );
  });
  printchannel.bind('autolevel_fail', function(){
    console.log('Autolevel-Failure Message received');
    $location.path( "/autolevel_fail/" );
  }); 
  printchannel.bind('emergency_stop', function(){
    console.log('Emergency Stop Message received');
    var shutdownModal = $modal.open({
      templateUrl: '<%= asset_path("touchapp/templates/dialog_emergency_stop.html") %>', 
      controller: 'DialogEmergencyStopController',
      backdrop: 'static'
    }); 
  }); 

  
  Service.lockscreen = {locked:false};
  lockscreenchannel = dispatcher.subscribe('lockscreen');
  lockscreenchannel.bind('toggle', function(message){
    console.log('Lockscreen toggle triggered!');
    $timeout(function(){
      Service.lockscreen.locked = !Service.lockscreen.locked;
    });
  });    
  
  Service.startprint = function(id) {
    console.log("STARTING PRINTJOB");
    dispatcher.trigger('startprint', id);
  }; 
  
  Service.abortprint = function() {
    console.log("ABORTING PRINTJOB");
    dispatcher.trigger('abortprint');
  }; 
  
  Service.pauseprint = function() {
    console.log("PAUSED PRINTJOB");
    dispatcher.trigger('pauseprint');
  }; 
  
  Service.resumeprint = function() {
    console.log("RESUMING PRINTJOB");
    dispatcher.trigger('resumeprint');
  }; 
  
  Service.shutdown = function() {
    console.log("SHUTTING DOWN THE MACHINE");
    dispatcher.trigger('shutdown');
  };   
  
  Service.removePrintjob = function(id) {
    dispatcher.trigger('printjob.remove', id);
  };  
  
  Service.calibrateOffsetPrintjob = function() {
    dispatcher.trigger("printjob.calibrate_offset");
  };
  
  Service.calibrateExtrusionPrintjob = function(ext) {
    dispatcher.trigger("printjob.calibrate_extrusion", ext);
  };  

  Service.preheat = function(chamber, bed) {
    dispatcher.trigger("preheat", [chamber, bed]);
  };  

  Service.psu_on = function() {
    dispatcher.trigger("psu_on");
  }
  
  filamentchannel = dispatcher.subscribe('filaments');
  filamentchannel.bind('reload', function(message){
    console.log('Filaments updated, reloading!');
    $timeout(function(){
      Service.get('filament.all').then(function(data){
        Service.filamentPresets = data;
      }); 
    });
  });   
  filamentchannel.bind('reload_loaded', function(message){
    console.log('Loaded Filaments changed, reloading!');
    $timeout(function(){
      Service.get('filament.get_loaded').then(function(data){
        Service.filamentsLoaded = data;
      }); 
    });
  });     
  
  Service.setFilaments = function(filaments) {
    // filaments.left => ID
    // filaments.right => ID
    dispatcher.trigger('filament.set_loaded', filaments);
  };  

  preheatingchannel = dispatcher.subscribe('preheating_profiles');
  preheatingchannel.bind('reload', function(message){
    console.log('Preheating Profiles updated, reloading!');
    $timeout(function(){
      Service.get('preheating_profile.all').then(function(data){
        Service.preheatingProfiles = data;
      }); 
    });
  });   
  preheatingchannel.bind('reload_selected', function(message){
    console.log('Loaded Preheating Profile changed, reloading!');
    $timeout(function(){
      Service.get('preheating_profile.get_selected').then(function(data){
        Service.preheatingProfile = data;
      }); 
    });
  });     
  
  Service.setPreheatingProfile = function(id) {
    dispatcher.trigger('preheating_profile.set_selected', id);
  };    


  eepromchannel = dispatcher.subscribe('eeprom');
  eepromchannel.bind('line', function(config){
    $timeout(function(){
      Service.eeprom[config.pos] = {
        type:config.type,
        val:config.val,        
        name:config.name
      };
    });
  });

  Service.reloadEEPROM = function() {
    Service.eeprom = {};
    Service.macro('reload_eeprom');
  };   

  Service.setEEPROM = function(pos, type, val) {
    dispatcher.trigger("set_eeprom", [pos, type, val]);
  };  
  
  return Service;
});